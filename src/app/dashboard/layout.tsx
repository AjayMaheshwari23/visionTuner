"use client";
import type { Metadata } from "next";
import { Inter } from "next/font/google";
import "./globals.css";
const inter = Inter({ subsets: ["latin"] });

// export const metadata: Metadata = {
//   title: "visionTuner",
//   description: "Generated by visionTuner",
// };

import {
  MenuFoldOutlined,
  MenuUnfoldOutlined,
  UploadOutlined,
  UserOutlined,
  VideoCameraOutlined,
  SettingOutlined,
} from "@ant-design/icons";
import { Layout, Menu, Button, theme } from "antd";

import { usePathname, useRouter } from "next/navigation";
import { createContext, useContext, useEffect, useState } from "react";

import "../../styles/Dashboard.css";
import Projects from "../../components/Pages/Projects";

const { Header, Sider, Content } = Layout;
const DarkModeContext = createContext({
  darkMode: false,
  toggleDarkMode: () => {},
});
export const useDarkMode = () => useContext(DarkModeContext);
export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  const router = useRouter();
  const [collapsed, setCollapsed] = useState(false);
  // const [key, setkey] = useState("1");

  const handleMenuItemClick = (key: string) => {
    //setkey(key);

    switch (key) {
      case "1":
        router.push("/dashboard/profile");
        break;

      case "2":
        router.push("/dashboard/projects");
        break;

      case "3":
        router.push("/dashboard/settings");
        break;

      default:
        break;
    }
  };
  // const [darkMode, setDarkMode] = useState(localStorage.getItem('darkMode') === 'true' ? true : false);
  const [darkMode, setDarkMode] = useState(
    localStorage.getItem("darkMode") === "true"
  );

  // Update dark mode state in response to changes in local storage
  useEffect(() => {
    const storedDarkMode = localStorage.getItem("darkMode") === "true";
    if (storedDarkMode !== darkMode) {
      setDarkMode(storedDarkMode);
    }
  }, [darkMode]);
  const toggleDarkMode = () => {
    const newDarkMode = !darkMode;
    localStorage.setItem("darkMode", String(newDarkMode)); // Update local storage
    setDarkMode(newDarkMode);
  };
  return (
    <DarkModeContext.Provider value={{ darkMode, toggleDarkMode }}>
        <Layout className="dashboard">
          <Sider trigger={null} collapsible collapsed={collapsed}>
            <div className="demo-logo-vertical" />
            <Menu
              theme="dark"
              mode="inline"
              defaultSelectedKeys={["1"]}
              style={{boxShadow: "rgba(0, 0, 0, 0.02) 0px 1px 3px 0px, rgba(27, 31, 35, 0.15) 0px 0px 0px 1px"}}
              onSelect={(e) => handleMenuItemClick(e.key)}
              items={[
                {
                  key: "1",
                  icon: <UserOutlined />,
                  label: "Profile",
                },
                {
                  key: "2",
                  icon: <UploadOutlined />,
                  label: "Projects",
                },
                {
                  key: "3",
                  icon: <SettingOutlined />,
                  label: "Settings",
                },
              ]}
            />
          </Sider>

          <Layout>
            <Header style={{ padding: 0, background: `${darkMode ? "black" : "white"}` ,boxShadow: "rgba(3, 102, 214, 0.3) 0px 0px 0px 3px"}}>
              <Button
                type="text"
                icon={collapsed ? <MenuUnfoldOutlined /> : <MenuFoldOutlined />}
                onClick={() => setCollapsed(!collapsed)}
                style={{
                  fontSize: "16px",
                  color:`${!darkMode ? "black" : "white"}`,
                  width: 64,
                  height: 64,
                }}
              />
            </Header>

            <Content>{children}</Content>
          </Layout>
        </Layout>
        </DarkModeContext.Provider>
  );
}
