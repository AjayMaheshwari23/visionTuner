"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/next-cloudinary";
exports.ids = ["vendor-chunks/next-cloudinary"];
exports.modules = {

/***/ "(ssr)/./node_modules/next-cloudinary/dist/index.mjs":
/*!*****************************************************!*\
  !*** ./node_modules/next-cloudinary/dist/index.mjs ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CldImage: () => (/* binding */ ye),\n/* harmony export */   CldOgImage: () => (/* binding */ Ce),\n/* harmony export */   CldUploadButton: () => (/* binding */ Ue),\n/* harmony export */   CldUploadWidget: () => (/* binding */ F),\n/* harmony export */   CldVideoPlayer: () => (/* binding */ Pe),\n/* harmony export */   cloudinaryLoader: () => (/* binding */ ee),\n/* harmony export */   getCldImageUrl: () => (/* binding */ E),\n/* harmony export */   getCldOgImageUrl: () => (/* binding */ X),\n/* harmony export */   getCldVideoUrl: () => (/* binding */ ie)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var next_image__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/image */ \"(ssr)/./node_modules/next/dist/api/image.js\");\n/* harmony import */ var _cloudinary_util_util__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @cloudinary-util/util */ \"(ssr)/./node_modules/@cloudinary-util/util/dist/index.mjs\");\n/* harmony import */ var _cloudinary_util_url_loader__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @cloudinary-util/url-loader */ \"(ssr)/./node_modules/@cloudinary-util/url-loader/dist/chunk-PNMEWWZM.mjs\");\n/* harmony import */ var next_package_json__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/package.json */ \"(ssr)/./node_modules/next/package.json\");\n/* harmony import */ var next_head__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! next/head */ \"(ssr)/./node_modules/next/dist/client/components/noop-head.js\");\n/* harmony import */ var next_script__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! next/script */ \"(ssr)/./node_modules/next/dist/api/script.js\");\n\n\n\n\n\nvar pe = {\n    name: \"next-cloudinary\",\n    version: \"6.5.1\",\n    license: \"MIT\",\n    main: \"./dist/index.js\",\n    module: \"./dist/index.mjs\",\n    types: \"./dist/index.d.ts\",\n    source: \"src/index.ts\",\n    scripts: {\n        build: \"tsup\",\n        dev: \"tsup --watch\",\n        prepublishOnly: \"cp ../README.md . && cp ../LICENSE . && pnpm build\",\n        postpublish: \"rm ./README.md && rm ./LICENSE\",\n        test: \"vitest run\",\n        \"test:app\": 'NEXT_PUBLIC_CLOUDINARY_CLOUD_NAME=\"test\" pnpm build && cd tests/nextjs-app && npm install && npm run build',\n        \"test:watch\": \"vitest\"\n    },\n    dependencies: {\n        \"@cloudinary-util/types\": \"1.0.2\",\n        \"@cloudinary-util/url-loader\": \"5.2.2\",\n        \"@cloudinary-util/util\": \"^3.0.0\",\n        \"@tsconfig/recommended\": \"^1.0.3\"\n    },\n    devDependencies: {\n        \"@babel/core\": \"^7.23.2\",\n        \"@babel/preset-env\": \"^7.23.2\",\n        \"@types/node\": \"^20.11.5\",\n        \"@types/react\": \"^18.2.33\",\n        \"@types/react-dom\": \"^18.2.14\",\n        dotenv: \"^16.3.1\",\n        mkdirp: \"^3.0.1\",\n        tsup: \"^7.2.0\",\n        typescript: \"^5.2.2\",\n        vitest: \"^1.3.1\"\n    },\n    peerDependencies: {\n        next: \"^12 || ^13 || ^14\",\n        react: \"^17 || ^18\"\n    }\n};\nvar ue = \"A\", ce = \"V\", ge = me(next_package_json__WEBPACK_IMPORTED_MODULE_2__.version), fe = me(pe.version);\nfunction me(e) {\n    let t = e;\n    return t.includes(\"-\") && (t = t.split(\"-\")[0]), t;\n}\nasync function H(e) {\n    let { src: t } = e;\n    try {\n        await new Promise((i, a)=>{\n            fetch(t).then((o)=>{\n                if (!o.ok) {\n                    a(o);\n                    return;\n                }\n                i(o);\n            });\n        });\n    } catch (i) {\n        return i.status === 423 ? (await new Promise((a)=>setTimeout(()=>a(void 0), 200)), await H(e)) : !1;\n    }\n    return !0;\n}\nfunction x(e) {\n    let t = e?.cloud?.cloudName ?? \"dy3umrh6j\";\n    if (!t) throw new Error(\"A Cloudinary Cloud name is required, please make sure NEXT_PUBLIC_CLOUDINARY_CLOUD_NAME is set and configured in your environment.\");\n    let i = e?.cloud?.apiKey ?? process.env.NEXT_PUBLIC_CLOUDINARY_API_KEY, a = e?.url?.secureDistribution ?? process.env.NEXT_PUBLIC_CLOUDINARY_SECURE_DISTRIBUTION, o = e?.url?.privateCdn ?? process.env.NEXT_PUBLIC_CLOUDINARY_PRIVATE_CDN;\n    return Object.assign({\n        cloud: {\n            ...e?.cloud,\n            apiKey: i,\n            cloudName: t\n        },\n        url: {\n            ...e?.url,\n            secureDistribution: a,\n            privateCdn: o\n        }\n    }, e);\n}\nfunction Y(e) {\n    return Object.assign({\n        product: ue,\n        sdkCode: ce,\n        sdkSemver: fe,\n        techVersion: ge,\n        feature: \"\"\n    }, e);\n}\n\nfunction E(e, t, i) {\n    return (0,_cloudinary_util_url_loader__WEBPACK_IMPORTED_MODULE_3__.constructCloudinaryUrl)({\n        options: e,\n        config: x(t),\n        analytics: Y(i)\n    });\n}\nfunction ee({ loaderOptions: e, imageProps: t, cldOptions: i, cldConfig: a = {} }) {\n    let o = {\n        ...t,\n        ...i\n    };\n    if (o.width = typeof o.width == \"string\" ? parseInt(o.width) : o.width, o.height = typeof o.height == \"string\" ? parseInt(o.height) : o.height, typeof e?.width == \"number\" && typeof o.width == \"number\" && e.width !== o.width) {\n        let n = e.width / o.width;\n        o.width = e.width, typeof o.height == \"number\" && (o.height = Math.floor(o.height * n));\n    } else typeof e?.width == \"number\" && typeof o?.width != \"number\" && (o.width = e?.width);\n    return E(o, a);\n}\nvar Se = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(function(t, i) {\n    let a = !1, o = [\n        \"deliveryType\",\n        \"preserveTransformations\",\n        \"strictTransformations\",\n        \"assetType\"\n    ];\n    _cloudinary_util_url_loader__WEBPACK_IMPORTED_MODULE_3__.transformationPlugins.forEach(({ props: r })=>{\n        Object.keys(r).forEach((C)=>{\n            if (o.includes(C)) throw new Error(`Option ${C} already exists!`);\n            o.push(C);\n        });\n    });\n    let n = {\n        alt: t.alt,\n        src: t.src\n    };\n    Object.keys(t).filter((r)=>typeof r == \"string\" && !o.includes(r)).forEach((r)=>n[r] = t[r]);\n    let s = Object.keys(n).map((r)=>`${r}:${n[r]}`).join(\";\"), [f, I] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(s), d = {};\n    if (o.forEach((r)=>{\n        let c = t[r];\n        c && (d[r] = c || void 0);\n    }), t.preserveTransformations) try {\n        let r = (0,_cloudinary_util_util__WEBPACK_IMPORTED_MODULE_4__.getTransformations)(t.src).map((c)=>c.join(\",\"));\n        d.rawTransformations = [\n            ...r.flat(),\n            ...t.rawTransformations || []\n        ];\n    } catch (r) {\n        console.warn(`Failed to preserve transformations: ${r.message}`);\n    }\n    let p = {\"deviceSizes\":[640,750,828,1080,1200,1920,2048,3840],\"imageSizes\":[16,32,48,64,96,128,256,384],\"path\":\"/_next/image\",\"loader\":\"default\",\"dangerouslyAllowSVG\":false,\"unoptimized\":false,\"domains\":[],\"remotePatterns\":[]} || {};\n    (t.unoptimized === !0 || p?.unoptimized === !0) && (n.src = E({\n        ...d,\n        width: n.width,\n        height: n.height,\n        src: n.src,\n        format: \"default\",\n        quality: \"default\"\n    }, t.config));\n    async function y(r) {\n        let c = !0;\n        if (a) return;\n        if (a = !0, typeof t.onError == \"function\") {\n            let w = t.onError(r);\n            typeof w == \"boolean\" && w === !1 && (c = !1);\n        } else typeof t.onError == \"boolean\" && t.onError === !1 && (c = !1);\n        if (c === !1) return;\n        let C = r.target;\n        await H({\n            src: C.src\n        }) && I(`${s};${Date.now()}`);\n    }\n    let b = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(y, [\n        H,\n        s\n    ]), h = next_image__WEBPACK_IMPORTED_MODULE_1__[\"default\"];\n    return \"default\" in h && (h = h.default), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(h, {\n        key: f,\n        ...n,\n        loader: (r)=>ee({\n                loaderOptions: r,\n                imageProps: n,\n                cldOptions: d,\n                cldConfig: t.config\n            }),\n        onError: b,\n        ref: i\n    });\n}), ye = Se;\n\n\nfunction X(e) {\n    return E({\n        ...e,\n        format: e.format || \"jpg\",\n        width: e.width || 1200,\n        height: e.height || 627,\n        crop: e.crop || {\n            type: \"fill\",\n            gravity: \"center\",\n            source: !0\n        }\n    });\n}\nvar Ge = \"summary_large_image\", Re = ({ excludeTags: e = [], twitterTitle: t, keys: i = {}, ...a })=>{\n    let { alt: o } = a, { width: n = 1200, height: s = 627 } = a;\n    n = typeof n == \"string\" ? parseInt(n) : n, s = typeof s == \"string\" ? parseInt(s) : s;\n    let f = X({\n        ...a,\n        width: n,\n        height: s\n    }), I = X({\n        ...a,\n        width: n,\n        height: s,\n        format: a.format || \"webp\"\n    }), d = {\n        \"og:image\": \"og-image\",\n        \"og:image:secure_url\": \"og-image-secureurl\",\n        \"og:image:width\": \"og-image-width\",\n        \"og:image:height\": \"og-image-height\",\n        \"og:image:alt\": \"og-image-alt\",\n        \"twitter:title\": \"twitter-title\",\n        \"twitter:card\": \"twitter-card\",\n        \"twitter:image\": \"twitter-image\",\n        ...i\n    };\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(next_head__WEBPACK_IMPORTED_MODULE_5__, null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"meta\", {\n        key: d[\"og:image\"],\n        property: \"og:image\",\n        content: f\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"meta\", {\n        key: d[\"og:image:secure_url\"],\n        property: \"og:image:secure_url\",\n        content: f\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"meta\", {\n        key: d[\"og:image:width\"],\n        property: \"og:image:width\",\n        content: `${n}`\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"meta\", {\n        key: d[\"og:image:height\"],\n        property: \"og:image:height\",\n        content: `${s}`\n    }), o && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"meta\", {\n        key: d[\"og:image:alt\"],\n        property: \"og:image:alt\",\n        content: o\n    }), !e.includes(\"twitter:title\") && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"meta\", {\n        key: d[\"twitter:title\"],\n        property: \"twitter:title\",\n        content: t || \" \"\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"meta\", {\n        key: d[\"twitter:card\"],\n        property: \"twitter:card\",\n        content: Ge\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"meta\", {\n        key: d[\"twitter:image\"],\n        property: \"twitter:image\",\n        content: I\n    }));\n}, Ce = Re;\n\n\n\nfunction Ie(e) {\n    return window && \"requestIdleCallback\" in window ? requestIdleCallback(e) : setTimeout(()=>e(), 1);\n}\nvar $e = [\n    \"success\"\n], Be = {\n    abort: \"onAbort\",\n    \"batch-cancelled\": \"onBatchCancelled\",\n    close: \"onClose\",\n    \"display-changed\": \"onDisplayChanged\",\n    publicid: \"onPublicId\",\n    \"queues-end\": \"onQueuesEnd\",\n    \"queues-start\": \"onQueuesStart\",\n    retry: \"onRetry\",\n    \"show-completed\": \"onShowCompleted\",\n    \"source-changed\": \"onSourceChanged\",\n    success: \"onSuccess\",\n    tags: \"onTags\",\n    \"upload-added\": \"onUploadAdded\"\n}, He = ({ children: e, config: t, onError: i, onOpen: a, onUpload: o, options: n, signatureEndpoint: s, uploadPreset: f, ...I })=>{\n    let d = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(), p = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(), y = !!s, [b, h] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(void 0), [r, c] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(void 0), [C, W] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(!0), w = x(t), { cloudName: G, apiKey: O } = w?.cloud, T = {\n        cloudName: G,\n        uploadPreset: f || process.env.NEXT_PUBLIC_CLOUDINARY_UPLOAD_PRESET,\n        apiKey: O,\n        ...n\n    };\n    y && (T.uploadSignature = A, T.apiKey || console.warn(\"Missing dependency: Signed Upload requires an API key\")), (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if (typeof r > \"u\") return;\n        r.event === \"success\" && typeof o == \"function\" && (process.env.NODE_ENVIRONMENT === \"development\" && console.warn(\"The onUpload callback is deprecated. Please use onSuccess instead.\"), o(r, p.current));\n    }, [\n        r\n    ]);\n    function V() {\n        W(!1), d.current || (d.current = window.cloudinary), Ie(()=>{\n            p.current || (p.current = J());\n        });\n    }\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>()=>{\n            p.current?.destroy(), p.current = void 0;\n        }, []);\n    function A(l, m) {\n        if (typeof s > \"u\") throw Error(\"Failed to generate signature: signatureEndpoint undefined.\");\n        fetch(s, {\n            method: \"POST\",\n            body: JSON.stringify({\n                paramsToSign: m\n            }),\n            headers: {\n                \"Content-Type\": \"application/json\"\n            }\n        }).then((U)=>U.json()).then(({ signature: U })=>{\n            l(U);\n        });\n    }\n    function g(l, m = []) {\n        if (p.current || (p.current = J()), typeof p?.current[l] == \"function\") return p.current[l](...m);\n    }\n    function _(l) {\n        g(\"close\", [\n            l\n        ]);\n    }\n    function D(l) {\n        return g(\"destroy\", [\n            l\n        ]);\n    }\n    function $() {\n        g(\"hide\");\n    }\n    function L() {\n        return g(\"isDestroyed\");\n    }\n    function B() {\n        return g(\"isMinimized\");\n    }\n    function K() {\n        return g(\"isShowing\");\n    }\n    function R() {\n        g(\"minimize\");\n    }\n    function Q(l, m) {\n        g(\"open\", [\n            l,\n            m\n        ]), typeof a == \"function\" && a(p.current);\n    }\n    function S() {\n        g(\"show\");\n    }\n    function v() {\n        g(\"update\");\n    }\n    let N = {\n        close: _,\n        destroy: D,\n        hide: $,\n        isDestroyed: L,\n        isMinimized: B,\n        isShowing: K,\n        minimize: R,\n        open: Q,\n        show: S,\n        update: v\n    };\n    function J() {\n        return d.current?.createUploadWidget(T, (l, m)=>{\n            if (l && l !== null && (h(l), typeof i == \"function\" && i(l, {\n                widget: p.current,\n                ...N\n            })), typeof m?.event == \"string\") {\n                $e.includes(m?.event) && c(m);\n                let U = Be[m.event];\n                if (typeof U == \"string\" && typeof I[U] == \"function\") {\n                    let Z = I[U];\n                    Z(m, {\n                        widget: p.current,\n                        ...N\n                    });\n                }\n            }\n        });\n    }\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, typeof e == \"function\" && e({\n        cloudinary: d.current,\n        widget: p.current,\n        results: r,\n        error: b,\n        isLoading: C,\n        ...N\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(next_script__WEBPACK_IMPORTED_MODULE_6__[\"default\"], {\n        id: `cloudinary-uploadwidget-${Math.floor(Math.random() * 100)}`,\n        src: \"https://upload-widget.cloudinary.com/global/all.js\",\n        onLoad: V,\n        onError: (l)=>console.error(`Failed to load Cloudinary Upload Widget: ${l.message}`)\n    }));\n}, F = He;\nvar Ye = ({ className: e, children: t, onClick: i, onError: a, onOpen: o, onUpload: n, onAbort: s, onBatchCancelled: f, onClose: I, onDisplayChanged: d, onPublicId: p, onQueuesEnd: y, onQueuesStart: b, onRetry: h, onShowCompleted: r, onSourceChanged: c, onSuccess: C, onTags: W, onUploadAdded: w, options: G, signatureEndpoint: O, uploadPreset: T, ...V })=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(F, {\n        onError: a,\n        onOpen: o,\n        onUpload: n,\n        onAbort: s,\n        onBatchCancelled: f,\n        onClose: I,\n        onDisplayChanged: d,\n        onPublicId: p,\n        onQueuesEnd: y,\n        onQueuesStart: b,\n        onRetry: h,\n        onShowCompleted: r,\n        onSourceChanged: c,\n        onSuccess: C,\n        onTags: W,\n        onUploadAdded: w,\n        options: G,\n        signatureEndpoint: O,\n        uploadPreset: T\n    }, ({ open: A, isLoading: g })=>{\n        function _(D) {\n            D.preventDefault(), A(), typeof i == \"function\" && i(D);\n        }\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"button\", {\n            ...V,\n            className: e || \"\",\n            onClick: _,\n            disabled: g\n        }, t || \"Upload\");\n    })), Ue = Ye;\n\n\n\n\n\nfunction ie(e, t, i) {\n    return (0,_cloudinary_util_url_loader__WEBPACK_IMPORTED_MODULE_3__.constructCloudinaryUrl)({\n        options: {\n            assetType: \"video\",\n            format: \"auto:video\",\n            ...e\n        },\n        config: x(t),\n        analytics: Y(i)\n    });\n}\nvar z = [], Ee = \"1.11.1\", Qe = (e)=>{\n    let { autoplay: t, className: i, colors: a, config: o, controls: n = !0, fontFace: s, height: f, id: I, language: d, languages: p, logo: y = !0, loop: b = !1, muted: h = !1, onDataLoad: r, onError: c, onMetadataLoad: C, onPause: W, onPlay: w, onEnded: G, poster: O, src: T, sourceTypes: V, transformation: A, quality: g = \"auto\", width: _, ...D } = e, $ = Array.isArray(A) ? A : [\n        A\n    ], L = T || \"\";\n    if (L.startsWith(\"http\")) try {\n        let u = (0,_cloudinary_util_util__WEBPACK_IMPORTED_MODULE_4__.parseUrl)(T);\n        typeof u?.publicId == \"string\" && (L = u?.publicId);\n    } catch  {}\n    $.unshift({\n        quality: g\n    });\n    let B = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(), K = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(), R = e.videoRef || K, Q = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(), S = e.playerRef || Q, v = I || `player-${L.replace(\"/\", \"-\")}`, N = \"cld-video-player cld-fluid\";\n    i && (N = `${N} ${i}`), z.filter((u)=>u === v).length > 1 ? console.warn(`Multiple instances of the same video detected on the\n     page which may cause some features to not work.\n    Try adding a unique id to each player.`) : z.push(v);\n    let l = {\n        error: c,\n        loadeddata: r,\n        loadedmetadata: C,\n        pause: W,\n        play: w,\n        ended: G\n    };\n    function m(u) {\n        let j = l[u.type];\n        typeof j == \"function\" && j(Z());\n    }\n    function U() {\n        if (\"cloudinary\" in window) {\n            B.current = window.cloudinary;\n            let u = {};\n            typeof y == \"boolean\" ? u.showLogo = y : typeof y == \"object\" && (u = {\n                ...u,\n                showLogo: !0,\n                logoImageUrl: y.imageUrl,\n                logoOnclickUrl: y.onClickUrl\n            });\n            let j = !1, de;\n            (typeof t == \"boolean\" || t === \"true\" || t === \"false\") && (j = t), typeof t == \"string\" && t !== \"true\" && t !== \"false\" && (de = t);\n            let le = x(o), { cloudName: we } = le?.cloud, { secureDistribution: Te, privateCdn: _e } = le?.url, k = {\n                cloud_name: we,\n                privateCdn: _e,\n                secureDistribution: Te,\n                autoplayMode: de,\n                autoplay: j,\n                controls: n,\n                fontFace: s || \"\",\n                language: d,\n                languages: p,\n                loop: b,\n                muted: h,\n                publicId: L,\n                width: _,\n                height: f,\n                aspectRatio: `${_}:${f}`,\n                transformation: $,\n                ...u,\n                ...D\n            };\n            Array.isArray(V) && (k.sourceTypes = V), typeof a == \"object\" && (k.colors = a), typeof O == \"string\" ? k.posterOptions = {\n                publicId: O\n            } : typeof O == \"object\" && (typeof O.src != \"string\" ? k.posterOptions = {\n                publicId: ie({\n                    ...O,\n                    src: L,\n                    format: \"auto:image\"\n                })\n            } : k.posterOptions = {\n                publicId: E(O)\n            }), S.current = B.current.videoPlayer(R.current, k), Object.keys(l).forEach((se)=>{\n                typeof l[se] == \"function\" && S.current?.on(se, m);\n            });\n        }\n    }\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>()=>{\n            S.current?.videojs.cloudinary.dispose(), z = z.filter((u)=>u !== v);\n        }, []);\n    function Z() {\n        return {\n            player: S.current,\n            video: R.current\n        };\n    }\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(next_head__WEBPACK_IMPORTED_MODULE_5__, null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"link\", {\n        href: `https://unpkg.com/cloudinary-video-player@${Ee}/dist/cld-video-player.min.css`,\n        rel: \"stylesheet\"\n    })), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        style: {\n            width: \"100%\",\n            aspectRatio: `${_} / ${f}`\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"video\", {\n        ref: R,\n        id: v,\n        className: N,\n        width: _,\n        height: f\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(next_script__WEBPACK_IMPORTED_MODULE_6__[\"default\"], {\n        id: `cloudinary-videoplayer-${v}-${Math.floor(Math.random() * 100)}`,\n        src: `https://unpkg.com/cloudinary-video-player@${Ee}/dist/cld-video-player.min.js`,\n        onLoad: U,\n        onError: (u)=>console.error(`Failed to load Cloudinary Video Player: ${u.message}`)\n    })));\n}, Pe = Qe;\n //# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/next-cloudinary/dist/index.mjs\n");

/***/ })

};
;