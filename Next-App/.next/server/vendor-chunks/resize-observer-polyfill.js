"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/resize-observer-polyfill";
exports.ids = ["vendor-chunks/resize-observer-polyfill"];
exports.modules = {

/***/ "(ssr)/./node_modules/resize-observer-polyfill/dist/ResizeObserver.es.js":
/*!*************************************************************************!*\
  !*** ./node_modules/resize-observer-polyfill/dist/ResizeObserver.es.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/**\r\n * A collection of shims that provide minimal functionality of the ES6 collections.\r\n *\r\n * These implementations are not meant to be used outside of the ResizeObserver\r\n * modules as they cover only a limited range of use cases.\r\n */ /* eslint-disable require-jsdoc, valid-jsdoc */ var MapShim = function() {\n    if (typeof Map !== \"undefined\") {\n        return Map;\n    }\n    /**\r\n     * Returns index in provided array that matches the specified key.\r\n     *\r\n     * @param {Array<Array>} arr\r\n     * @param {*} key\r\n     * @returns {number}\r\n     */ function getIndex(arr, key) {\n        var result = -1;\n        arr.some(function(entry, index) {\n            if (entry[0] === key) {\n                result = index;\n                return true;\n            }\n            return false;\n        });\n        return result;\n    }\n    return /** @class */ function() {\n        function class_1() {\n            this.__entries__ = [];\n        }\n        Object.defineProperty(class_1.prototype, \"size\", {\n            /**\r\n             * @returns {boolean}\r\n             */ get: function() {\n                return this.__entries__.length;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        /**\r\n         * @param {*} key\r\n         * @returns {*}\r\n         */ class_1.prototype.get = function(key) {\n            var index = getIndex(this.__entries__, key);\n            var entry = this.__entries__[index];\n            return entry && entry[1];\n        };\n        /**\r\n         * @param {*} key\r\n         * @param {*} value\r\n         * @returns {void}\r\n         */ class_1.prototype.set = function(key, value) {\n            var index = getIndex(this.__entries__, key);\n            if (~index) {\n                this.__entries__[index][1] = value;\n            } else {\n                this.__entries__.push([\n                    key,\n                    value\n                ]);\n            }\n        };\n        /**\r\n         * @param {*} key\r\n         * @returns {void}\r\n         */ class_1.prototype.delete = function(key) {\n            var entries = this.__entries__;\n            var index = getIndex(entries, key);\n            if (~index) {\n                entries.splice(index, 1);\n            }\n        };\n        /**\r\n         * @param {*} key\r\n         * @returns {void}\r\n         */ class_1.prototype.has = function(key) {\n            return !!~getIndex(this.__entries__, key);\n        };\n        /**\r\n         * @returns {void}\r\n         */ class_1.prototype.clear = function() {\n            this.__entries__.splice(0);\n        };\n        /**\r\n         * @param {Function} callback\r\n         * @param {*} [ctx=null]\r\n         * @returns {void}\r\n         */ class_1.prototype.forEach = function(callback, ctx) {\n            if (ctx === void 0) {\n                ctx = null;\n            }\n            for(var _i = 0, _a = this.__entries__; _i < _a.length; _i++){\n                var entry = _a[_i];\n                callback.call(ctx, entry[1], entry[0]);\n            }\n        };\n        return class_1;\n    }();\n}();\n/**\r\n * Detects whether window and document objects are available in current environment.\r\n */ var isBrowser =  false && 0;\n// Returns global object of a current environment.\nvar global$1 = function() {\n    if (typeof global !== \"undefined\" && global.Math === Math) {\n        return global;\n    }\n    if (typeof self !== \"undefined\" && self.Math === Math) {\n        return self;\n    }\n    if (false) {}\n    // eslint-disable-next-line no-new-func\n    return Function(\"return this\")();\n}();\n/**\r\n * A shim for the requestAnimationFrame which falls back to the setTimeout if\r\n * first one is not supported.\r\n *\r\n * @returns {number} Requests' identifier.\r\n */ var requestAnimationFrame$1 = function() {\n    if (typeof requestAnimationFrame === \"function\") {\n        // It's required to use a bounded function because IE sometimes throws\n        // an \"Invalid calling object\" error if rAF is invoked without the global\n        // object on the left hand side.\n        return requestAnimationFrame.bind(global$1);\n    }\n    return function(callback) {\n        return setTimeout(function() {\n            return callback(Date.now());\n        }, 1000 / 60);\n    };\n}();\n// Defines minimum timeout before adding a trailing call.\nvar trailingTimeout = 2;\n/**\r\n * Creates a wrapper function which ensures that provided callback will be\r\n * invoked only once during the specified delay period.\r\n *\r\n * @param {Function} callback - Function to be invoked after the delay period.\r\n * @param {number} delay - Delay after which to invoke callback.\r\n * @returns {Function}\r\n */ function throttle(callback, delay) {\n    var leadingCall = false, trailingCall = false, lastCallTime = 0;\n    /**\r\n     * Invokes the original callback function and schedules new invocation if\r\n     * the \"proxy\" was called during current request.\r\n     *\r\n     * @returns {void}\r\n     */ function resolvePending() {\n        if (leadingCall) {\n            leadingCall = false;\n            callback();\n        }\n        if (trailingCall) {\n            proxy();\n        }\n    }\n    /**\r\n     * Callback invoked after the specified delay. It will further postpone\r\n     * invocation of the original function delegating it to the\r\n     * requestAnimationFrame.\r\n     *\r\n     * @returns {void}\r\n     */ function timeoutCallback() {\n        requestAnimationFrame$1(resolvePending);\n    }\n    /**\r\n     * Schedules invocation of the original function.\r\n     *\r\n     * @returns {void}\r\n     */ function proxy() {\n        var timeStamp = Date.now();\n        if (leadingCall) {\n            // Reject immediately following calls.\n            if (timeStamp - lastCallTime < trailingTimeout) {\n                return;\n            }\n            // Schedule new call to be in invoked when the pending one is resolved.\n            // This is important for \"transitions\" which never actually start\n            // immediately so there is a chance that we might miss one if change\n            // happens amids the pending invocation.\n            trailingCall = true;\n        } else {\n            leadingCall = true;\n            trailingCall = false;\n            setTimeout(timeoutCallback, delay);\n        }\n        lastCallTime = timeStamp;\n    }\n    return proxy;\n}\n// Minimum delay before invoking the update of observers.\nvar REFRESH_DELAY = 20;\n// A list of substrings of CSS properties used to find transition events that\n// might affect dimensions of observed elements.\nvar transitionKeys = [\n    \"top\",\n    \"right\",\n    \"bottom\",\n    \"left\",\n    \"width\",\n    \"height\",\n    \"size\",\n    \"weight\"\n];\n// Check if MutationObserver is available.\nvar mutationObserverSupported = typeof MutationObserver !== \"undefined\";\n/**\r\n * Singleton controller class which handles updates of ResizeObserver instances.\r\n */ var ResizeObserverController = /** @class */ function() {\n    /**\r\n     * Creates a new instance of ResizeObserverController.\r\n     *\r\n     * @private\r\n     */ function ResizeObserverController() {\n        /**\r\n         * Indicates whether DOM listeners have been added.\r\n         *\r\n         * @private {boolean}\r\n         */ this.connected_ = false;\n        /**\r\n         * Tells that controller has subscribed for Mutation Events.\r\n         *\r\n         * @private {boolean}\r\n         */ this.mutationEventsAdded_ = false;\n        /**\r\n         * Keeps reference to the instance of MutationObserver.\r\n         *\r\n         * @private {MutationObserver}\r\n         */ this.mutationsObserver_ = null;\n        /**\r\n         * A list of connected observers.\r\n         *\r\n         * @private {Array<ResizeObserverSPI>}\r\n         */ this.observers_ = [];\n        this.onTransitionEnd_ = this.onTransitionEnd_.bind(this);\n        this.refresh = throttle(this.refresh.bind(this), REFRESH_DELAY);\n    }\n    /**\r\n     * Adds observer to observers list.\r\n     *\r\n     * @param {ResizeObserverSPI} observer - Observer to be added.\r\n     * @returns {void}\r\n     */ ResizeObserverController.prototype.addObserver = function(observer) {\n        if (!~this.observers_.indexOf(observer)) {\n            this.observers_.push(observer);\n        }\n        // Add listeners if they haven't been added yet.\n        if (!this.connected_) {\n            this.connect_();\n        }\n    };\n    /**\r\n     * Removes observer from observers list.\r\n     *\r\n     * @param {ResizeObserverSPI} observer - Observer to be removed.\r\n     * @returns {void}\r\n     */ ResizeObserverController.prototype.removeObserver = function(observer) {\n        var observers = this.observers_;\n        var index = observers.indexOf(observer);\n        // Remove observer if it's present in registry.\n        if (~index) {\n            observers.splice(index, 1);\n        }\n        // Remove listeners if controller has no connected observers.\n        if (!observers.length && this.connected_) {\n            this.disconnect_();\n        }\n    };\n    /**\r\n     * Invokes the update of observers. It will continue running updates insofar\r\n     * it detects changes.\r\n     *\r\n     * @returns {void}\r\n     */ ResizeObserverController.prototype.refresh = function() {\n        var changesDetected = this.updateObservers_();\n        // Continue running updates if changes have been detected as there might\n        // be future ones caused by CSS transitions.\n        if (changesDetected) {\n            this.refresh();\n        }\n    };\n    /**\r\n     * Updates every observer from observers list and notifies them of queued\r\n     * entries.\r\n     *\r\n     * @private\r\n     * @returns {boolean} Returns \"true\" if any observer has detected changes in\r\n     *      dimensions of it's elements.\r\n     */ ResizeObserverController.prototype.updateObservers_ = function() {\n        // Collect observers that have active observations.\n        var activeObservers = this.observers_.filter(function(observer) {\n            return observer.gatherActive(), observer.hasActive();\n        });\n        // Deliver notifications in a separate cycle in order to avoid any\n        // collisions between observers, e.g. when multiple instances of\n        // ResizeObserver are tracking the same element and the callback of one\n        // of them changes content dimensions of the observed target. Sometimes\n        // this may result in notifications being blocked for the rest of observers.\n        activeObservers.forEach(function(observer) {\n            return observer.broadcastActive();\n        });\n        return activeObservers.length > 0;\n    };\n    /**\r\n     * Initializes DOM listeners.\r\n     *\r\n     * @private\r\n     * @returns {void}\r\n     */ ResizeObserverController.prototype.connect_ = function() {\n        // Do nothing if running in a non-browser environment or if listeners\n        // have been already added.\n        if (!isBrowser || this.connected_) {\n            return;\n        }\n        // Subscription to the \"Transitionend\" event is used as a workaround for\n        // delayed transitions. This way it's possible to capture at least the\n        // final state of an element.\n        document.addEventListener(\"transitionend\", this.onTransitionEnd_);\n        window.addEventListener(\"resize\", this.refresh);\n        if (mutationObserverSupported) {\n            this.mutationsObserver_ = new MutationObserver(this.refresh);\n            this.mutationsObserver_.observe(document, {\n                attributes: true,\n                childList: true,\n                characterData: true,\n                subtree: true\n            });\n        } else {\n            document.addEventListener(\"DOMSubtreeModified\", this.refresh);\n            this.mutationEventsAdded_ = true;\n        }\n        this.connected_ = true;\n    };\n    /**\r\n     * Removes DOM listeners.\r\n     *\r\n     * @private\r\n     * @returns {void}\r\n     */ ResizeObserverController.prototype.disconnect_ = function() {\n        // Do nothing if running in a non-browser environment or if listeners\n        // have been already removed.\n        if (!isBrowser || !this.connected_) {\n            return;\n        }\n        document.removeEventListener(\"transitionend\", this.onTransitionEnd_);\n        window.removeEventListener(\"resize\", this.refresh);\n        if (this.mutationsObserver_) {\n            this.mutationsObserver_.disconnect();\n        }\n        if (this.mutationEventsAdded_) {\n            document.removeEventListener(\"DOMSubtreeModified\", this.refresh);\n        }\n        this.mutationsObserver_ = null;\n        this.mutationEventsAdded_ = false;\n        this.connected_ = false;\n    };\n    /**\r\n     * \"Transitionend\" event handler.\r\n     *\r\n     * @private\r\n     * @param {TransitionEvent} event\r\n     * @returns {void}\r\n     */ ResizeObserverController.prototype.onTransitionEnd_ = function(_a) {\n        var _b = _a.propertyName, propertyName = _b === void 0 ? \"\" : _b;\n        // Detect whether transition may affect dimensions of an element.\n        var isReflowProperty = transitionKeys.some(function(key) {\n            return !!~propertyName.indexOf(key);\n        });\n        if (isReflowProperty) {\n            this.refresh();\n        }\n    };\n    /**\r\n     * Returns instance of the ResizeObserverController.\r\n     *\r\n     * @returns {ResizeObserverController}\r\n     */ ResizeObserverController.getInstance = function() {\n        if (!this.instance_) {\n            this.instance_ = new ResizeObserverController();\n        }\n        return this.instance_;\n    };\n    /**\r\n     * Holds reference to the controller's instance.\r\n     *\r\n     * @private {ResizeObserverController}\r\n     */ ResizeObserverController.instance_ = null;\n    return ResizeObserverController;\n}();\n/**\r\n * Defines non-writable/enumerable properties of the provided target object.\r\n *\r\n * @param {Object} target - Object for which to define properties.\r\n * @param {Object} props - Properties to be defined.\r\n * @returns {Object} Target object.\r\n */ var defineConfigurable = function(target, props) {\n    for(var _i = 0, _a = Object.keys(props); _i < _a.length; _i++){\n        var key = _a[_i];\n        Object.defineProperty(target, key, {\n            value: props[key],\n            enumerable: false,\n            writable: false,\n            configurable: true\n        });\n    }\n    return target;\n};\n/**\r\n * Returns the global object associated with provided element.\r\n *\r\n * @param {Object} target\r\n * @returns {Object}\r\n */ var getWindowOf = function(target) {\n    // Assume that the element is an instance of Node, which means that it\n    // has the \"ownerDocument\" property from which we can retrieve a\n    // corresponding global object.\n    var ownerGlobal = target && target.ownerDocument && target.ownerDocument.defaultView;\n    // Return the local global object if it's not possible extract one from\n    // provided element.\n    return ownerGlobal || global$1;\n};\n// Placeholder of an empty content rectangle.\nvar emptyRect = createRectInit(0, 0, 0, 0);\n/**\r\n * Converts provided string to a number.\r\n *\r\n * @param {number|string} value\r\n * @returns {number}\r\n */ function toFloat(value) {\n    return parseFloat(value) || 0;\n}\n/**\r\n * Extracts borders size from provided styles.\r\n *\r\n * @param {CSSStyleDeclaration} styles\r\n * @param {...string} positions - Borders positions (top, right, ...)\r\n * @returns {number}\r\n */ function getBordersSize(styles) {\n    var positions = [];\n    for(var _i = 1; _i < arguments.length; _i++){\n        positions[_i - 1] = arguments[_i];\n    }\n    return positions.reduce(function(size, position) {\n        var value = styles[\"border-\" + position + \"-width\"];\n        return size + toFloat(value);\n    }, 0);\n}\n/**\r\n * Extracts paddings sizes from provided styles.\r\n *\r\n * @param {CSSStyleDeclaration} styles\r\n * @returns {Object} Paddings box.\r\n */ function getPaddings(styles) {\n    var positions = [\n        \"top\",\n        \"right\",\n        \"bottom\",\n        \"left\"\n    ];\n    var paddings = {};\n    for(var _i = 0, positions_1 = positions; _i < positions_1.length; _i++){\n        var position = positions_1[_i];\n        var value = styles[\"padding-\" + position];\n        paddings[position] = toFloat(value);\n    }\n    return paddings;\n}\n/**\r\n * Calculates content rectangle of provided SVG element.\r\n *\r\n * @param {SVGGraphicsElement} target - Element content rectangle of which needs\r\n *      to be calculated.\r\n * @returns {DOMRectInit}\r\n */ function getSVGContentRect(target) {\n    var bbox = target.getBBox();\n    return createRectInit(0, 0, bbox.width, bbox.height);\n}\n/**\r\n * Calculates content rectangle of provided HTMLElement.\r\n *\r\n * @param {HTMLElement} target - Element for which to calculate the content rectangle.\r\n * @returns {DOMRectInit}\r\n */ function getHTMLElementContentRect(target) {\n    // Client width & height properties can't be\n    // used exclusively as they provide rounded values.\n    var clientWidth = target.clientWidth, clientHeight = target.clientHeight;\n    // By this condition we can catch all non-replaced inline, hidden and\n    // detached elements. Though elements with width & height properties less\n    // than 0.5 will be discarded as well.\n    //\n    // Without it we would need to implement separate methods for each of\n    // those cases and it's not possible to perform a precise and performance\n    // effective test for hidden elements. E.g. even jQuery's ':visible' filter\n    // gives wrong results for elements with width & height less than 0.5.\n    if (!clientWidth && !clientHeight) {\n        return emptyRect;\n    }\n    var styles = getWindowOf(target).getComputedStyle(target);\n    var paddings = getPaddings(styles);\n    var horizPad = paddings.left + paddings.right;\n    var vertPad = paddings.top + paddings.bottom;\n    // Computed styles of width & height are being used because they are the\n    // only dimensions available to JS that contain non-rounded values. It could\n    // be possible to utilize the getBoundingClientRect if only it's data wasn't\n    // affected by CSS transformations let alone paddings, borders and scroll bars.\n    var width = toFloat(styles.width), height = toFloat(styles.height);\n    // Width & height include paddings and borders when the 'border-box' box\n    // model is applied (except for IE).\n    if (styles.boxSizing === \"border-box\") {\n        // Following conditions are required to handle Internet Explorer which\n        // doesn't include paddings and borders to computed CSS dimensions.\n        //\n        // We can say that if CSS dimensions + paddings are equal to the \"client\"\n        // properties then it's either IE, and thus we don't need to subtract\n        // anything, or an element merely doesn't have paddings/borders styles.\n        if (Math.round(width + horizPad) !== clientWidth) {\n            width -= getBordersSize(styles, \"left\", \"right\") + horizPad;\n        }\n        if (Math.round(height + vertPad) !== clientHeight) {\n            height -= getBordersSize(styles, \"top\", \"bottom\") + vertPad;\n        }\n    }\n    // Following steps can't be applied to the document's root element as its\n    // client[Width/Height] properties represent viewport area of the window.\n    // Besides, it's as well not necessary as the <html> itself neither has\n    // rendered scroll bars nor it can be clipped.\n    if (!isDocumentElement(target)) {\n        // In some browsers (only in Firefox, actually) CSS width & height\n        // include scroll bars size which can be removed at this step as scroll\n        // bars are the only difference between rounded dimensions + paddings\n        // and \"client\" properties, though that is not always true in Chrome.\n        var vertScrollbar = Math.round(width + horizPad) - clientWidth;\n        var horizScrollbar = Math.round(height + vertPad) - clientHeight;\n        // Chrome has a rather weird rounding of \"client\" properties.\n        // E.g. for an element with content width of 314.2px it sometimes gives\n        // the client width of 315px and for the width of 314.7px it may give\n        // 314px. And it doesn't happen all the time. So just ignore this delta\n        // as a non-relevant.\n        if (Math.abs(vertScrollbar) !== 1) {\n            width -= vertScrollbar;\n        }\n        if (Math.abs(horizScrollbar) !== 1) {\n            height -= horizScrollbar;\n        }\n    }\n    return createRectInit(paddings.left, paddings.top, width, height);\n}\n/**\r\n * Checks whether provided element is an instance of the SVGGraphicsElement.\r\n *\r\n * @param {Element} target - Element to be checked.\r\n * @returns {boolean}\r\n */ var isSVGGraphicsElement = function() {\n    // Some browsers, namely IE and Edge, don't have the SVGGraphicsElement\n    // interface.\n    if (typeof SVGGraphicsElement !== \"undefined\") {\n        return function(target) {\n            return target instanceof getWindowOf(target).SVGGraphicsElement;\n        };\n    }\n    // If it's so, then check that element is at least an instance of the\n    // SVGElement and that it has the \"getBBox\" method.\n    // eslint-disable-next-line no-extra-parens\n    return function(target) {\n        return target instanceof getWindowOf(target).SVGElement && typeof target.getBBox === \"function\";\n    };\n}();\n/**\r\n * Checks whether provided element is a document element (<html>).\r\n *\r\n * @param {Element} target - Element to be checked.\r\n * @returns {boolean}\r\n */ function isDocumentElement(target) {\n    return target === getWindowOf(target).document.documentElement;\n}\n/**\r\n * Calculates an appropriate content rectangle for provided html or svg element.\r\n *\r\n * @param {Element} target - Element content rectangle of which needs to be calculated.\r\n * @returns {DOMRectInit}\r\n */ function getContentRect(target) {\n    if (!isBrowser) {\n        return emptyRect;\n    }\n    if (isSVGGraphicsElement(target)) {\n        return getSVGContentRect(target);\n    }\n    return getHTMLElementContentRect(target);\n}\n/**\r\n * Creates rectangle with an interface of the DOMRectReadOnly.\r\n * Spec: https://drafts.fxtf.org/geometry/#domrectreadonly\r\n *\r\n * @param {DOMRectInit} rectInit - Object with rectangle's x/y coordinates and dimensions.\r\n * @returns {DOMRectReadOnly}\r\n */ function createReadOnlyRect(_a) {\n    var x = _a.x, y = _a.y, width = _a.width, height = _a.height;\n    // If DOMRectReadOnly is available use it as a prototype for the rectangle.\n    var Constr = typeof DOMRectReadOnly !== \"undefined\" ? DOMRectReadOnly : Object;\n    var rect = Object.create(Constr.prototype);\n    // Rectangle's properties are not writable and non-enumerable.\n    defineConfigurable(rect, {\n        x: x,\n        y: y,\n        width: width,\n        height: height,\n        top: y,\n        right: x + width,\n        bottom: height + y,\n        left: x\n    });\n    return rect;\n}\n/**\r\n * Creates DOMRectInit object based on the provided dimensions and the x/y coordinates.\r\n * Spec: https://drafts.fxtf.org/geometry/#dictdef-domrectinit\r\n *\r\n * @param {number} x - X coordinate.\r\n * @param {number} y - Y coordinate.\r\n * @param {number} width - Rectangle's width.\r\n * @param {number} height - Rectangle's height.\r\n * @returns {DOMRectInit}\r\n */ function createRectInit(x, y, width, height) {\n    return {\n        x: x,\n        y: y,\n        width: width,\n        height: height\n    };\n}\n/**\r\n * Class that is responsible for computations of the content rectangle of\r\n * provided DOM element and for keeping track of it's changes.\r\n */ var ResizeObservation = /** @class */ function() {\n    /**\r\n     * Creates an instance of ResizeObservation.\r\n     *\r\n     * @param {Element} target - Element to be observed.\r\n     */ function ResizeObservation(target) {\n        /**\r\n         * Broadcasted width of content rectangle.\r\n         *\r\n         * @type {number}\r\n         */ this.broadcastWidth = 0;\n        /**\r\n         * Broadcasted height of content rectangle.\r\n         *\r\n         * @type {number}\r\n         */ this.broadcastHeight = 0;\n        /**\r\n         * Reference to the last observed content rectangle.\r\n         *\r\n         * @private {DOMRectInit}\r\n         */ this.contentRect_ = createRectInit(0, 0, 0, 0);\n        this.target = target;\n    }\n    /**\r\n     * Updates content rectangle and tells whether it's width or height properties\r\n     * have changed since the last broadcast.\r\n     *\r\n     * @returns {boolean}\r\n     */ ResizeObservation.prototype.isActive = function() {\n        var rect = getContentRect(this.target);\n        this.contentRect_ = rect;\n        return rect.width !== this.broadcastWidth || rect.height !== this.broadcastHeight;\n    };\n    /**\r\n     * Updates 'broadcastWidth' and 'broadcastHeight' properties with a data\r\n     * from the corresponding properties of the last observed content rectangle.\r\n     *\r\n     * @returns {DOMRectInit} Last observed content rectangle.\r\n     */ ResizeObservation.prototype.broadcastRect = function() {\n        var rect = this.contentRect_;\n        this.broadcastWidth = rect.width;\n        this.broadcastHeight = rect.height;\n        return rect;\n    };\n    return ResizeObservation;\n}();\nvar ResizeObserverEntry = /** @class */ function() {\n    /**\r\n     * Creates an instance of ResizeObserverEntry.\r\n     *\r\n     * @param {Element} target - Element that is being observed.\r\n     * @param {DOMRectInit} rectInit - Data of the element's content rectangle.\r\n     */ function ResizeObserverEntry(target, rectInit) {\n        var contentRect = createReadOnlyRect(rectInit);\n        // According to the specification following properties are not writable\n        // and are also not enumerable in the native implementation.\n        //\n        // Property accessors are not being used as they'd require to define a\n        // private WeakMap storage which may cause memory leaks in browsers that\n        // don't support this type of collections.\n        defineConfigurable(this, {\n            target: target,\n            contentRect: contentRect\n        });\n    }\n    return ResizeObserverEntry;\n}();\nvar ResizeObserverSPI = /** @class */ function() {\n    /**\r\n     * Creates a new instance of ResizeObserver.\r\n     *\r\n     * @param {ResizeObserverCallback} callback - Callback function that is invoked\r\n     *      when one of the observed elements changes it's content dimensions.\r\n     * @param {ResizeObserverController} controller - Controller instance which\r\n     *      is responsible for the updates of observer.\r\n     * @param {ResizeObserver} callbackCtx - Reference to the public\r\n     *      ResizeObserver instance which will be passed to callback function.\r\n     */ function ResizeObserverSPI(callback, controller, callbackCtx) {\n        /**\r\n         * Collection of resize observations that have detected changes in dimensions\r\n         * of elements.\r\n         *\r\n         * @private {Array<ResizeObservation>}\r\n         */ this.activeObservations_ = [];\n        /**\r\n         * Registry of the ResizeObservation instances.\r\n         *\r\n         * @private {Map<Element, ResizeObservation>}\r\n         */ this.observations_ = new MapShim();\n        if (typeof callback !== \"function\") {\n            throw new TypeError(\"The callback provided as parameter 1 is not a function.\");\n        }\n        this.callback_ = callback;\n        this.controller_ = controller;\n        this.callbackCtx_ = callbackCtx;\n    }\n    /**\r\n     * Starts observing provided element.\r\n     *\r\n     * @param {Element} target - Element to be observed.\r\n     * @returns {void}\r\n     */ ResizeObserverSPI.prototype.observe = function(target) {\n        if (!arguments.length) {\n            throw new TypeError(\"1 argument required, but only 0 present.\");\n        }\n        // Do nothing if current environment doesn't have the Element interface.\n        if (typeof Element === \"undefined\" || !(Element instanceof Object)) {\n            return;\n        }\n        if (!(target instanceof getWindowOf(target).Element)) {\n            throw new TypeError('parameter 1 is not of type \"Element\".');\n        }\n        var observations = this.observations_;\n        // Do nothing if element is already being observed.\n        if (observations.has(target)) {\n            return;\n        }\n        observations.set(target, new ResizeObservation(target));\n        this.controller_.addObserver(this);\n        // Force the update of observations.\n        this.controller_.refresh();\n    };\n    /**\r\n     * Stops observing provided element.\r\n     *\r\n     * @param {Element} target - Element to stop observing.\r\n     * @returns {void}\r\n     */ ResizeObserverSPI.prototype.unobserve = function(target) {\n        if (!arguments.length) {\n            throw new TypeError(\"1 argument required, but only 0 present.\");\n        }\n        // Do nothing if current environment doesn't have the Element interface.\n        if (typeof Element === \"undefined\" || !(Element instanceof Object)) {\n            return;\n        }\n        if (!(target instanceof getWindowOf(target).Element)) {\n            throw new TypeError('parameter 1 is not of type \"Element\".');\n        }\n        var observations = this.observations_;\n        // Do nothing if element is not being observed.\n        if (!observations.has(target)) {\n            return;\n        }\n        observations.delete(target);\n        if (!observations.size) {\n            this.controller_.removeObserver(this);\n        }\n    };\n    /**\r\n     * Stops observing all elements.\r\n     *\r\n     * @returns {void}\r\n     */ ResizeObserverSPI.prototype.disconnect = function() {\n        this.clearActive();\n        this.observations_.clear();\n        this.controller_.removeObserver(this);\n    };\n    /**\r\n     * Collects observation instances the associated element of which has changed\r\n     * it's content rectangle.\r\n     *\r\n     * @returns {void}\r\n     */ ResizeObserverSPI.prototype.gatherActive = function() {\n        var _this = this;\n        this.clearActive();\n        this.observations_.forEach(function(observation) {\n            if (observation.isActive()) {\n                _this.activeObservations_.push(observation);\n            }\n        });\n    };\n    /**\r\n     * Invokes initial callback function with a list of ResizeObserverEntry\r\n     * instances collected from active resize observations.\r\n     *\r\n     * @returns {void}\r\n     */ ResizeObserverSPI.prototype.broadcastActive = function() {\n        // Do nothing if observer doesn't have active observations.\n        if (!this.hasActive()) {\n            return;\n        }\n        var ctx = this.callbackCtx_;\n        // Create ResizeObserverEntry instance for every active observation.\n        var entries = this.activeObservations_.map(function(observation) {\n            return new ResizeObserverEntry(observation.target, observation.broadcastRect());\n        });\n        this.callback_.call(ctx, entries, ctx);\n        this.clearActive();\n    };\n    /**\r\n     * Clears the collection of active observations.\r\n     *\r\n     * @returns {void}\r\n     */ ResizeObserverSPI.prototype.clearActive = function() {\n        this.activeObservations_.splice(0);\n    };\n    /**\r\n     * Tells whether observer has active observations.\r\n     *\r\n     * @returns {boolean}\r\n     */ ResizeObserverSPI.prototype.hasActive = function() {\n        return this.activeObservations_.length > 0;\n    };\n    return ResizeObserverSPI;\n}();\n// Registry of internal observers. If WeakMap is not available use current shim\n// for the Map collection as it has all required methods and because WeakMap\n// can't be fully polyfilled anyway.\nvar observers = typeof WeakMap !== \"undefined\" ? new WeakMap() : new MapShim();\n/**\r\n * ResizeObserver API. Encapsulates the ResizeObserver SPI implementation\r\n * exposing only those methods and properties that are defined in the spec.\r\n */ var ResizeObserver = /** @class */ function() {\n    /**\r\n     * Creates a new instance of ResizeObserver.\r\n     *\r\n     * @param {ResizeObserverCallback} callback - Callback that is invoked when\r\n     *      dimensions of the observed elements change.\r\n     */ function ResizeObserver(callback) {\n        if (!(this instanceof ResizeObserver)) {\n            throw new TypeError(\"Cannot call a class as a function.\");\n        }\n        if (!arguments.length) {\n            throw new TypeError(\"1 argument required, but only 0 present.\");\n        }\n        var controller = ResizeObserverController.getInstance();\n        var observer = new ResizeObserverSPI(callback, controller, this);\n        observers.set(this, observer);\n    }\n    return ResizeObserver;\n}();\n// Expose public methods of ResizeObserver.\n[\n    \"observe\",\n    \"unobserve\",\n    \"disconnect\"\n].forEach(function(method) {\n    ResizeObserver.prototype[method] = function() {\n        var _a;\n        return (_a = observers.get(this))[method].apply(_a, arguments);\n    };\n});\nvar index = function() {\n    // Export existing implementation if available.\n    if (typeof global$1.ResizeObserver !== \"undefined\") {\n        return global$1.ResizeObserver;\n    }\n    return ResizeObserver;\n}();\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (index);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/resize-observer-polyfill/dist/ResizeObserver.es.js\n");

/***/ })

};
;